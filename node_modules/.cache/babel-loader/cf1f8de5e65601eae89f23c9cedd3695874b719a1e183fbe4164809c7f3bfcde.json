{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cx417\\\\Desktop\\\\Authentication\\\\inotebook\\\\src\\\\context\\\\notes\\\\noteState.js\",\n  _s = $RefreshSig$();\nimport NoteContext from \"./noteContext\"; // Importing the NoteContext from \"./noteContext\"\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  // Defining a functional component called NoteState which takes props\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial); //\n\n  // addAll notes\n\n  const fetchNotes = async () => {\n    const response = await fetch(`${host}/api/notes/notesFetched`, {\n      method: \"GET\",\n      // *GET, POST, PUT, DELETE, etc.\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjUwMWM0ZTM1YTU0NTQyNzcyMmQzYWIzIn0sImlhdCI6MTY5NTA0NDk4NH0.wTMS84uz0KDOtDcGbf3R4HB3wlIEQPIBP3BeC-s0CH8\"\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n  };\n\n  // add notes\n\n  const addNotes = async (title, description, tags) => {\n    const response = await fetch(`${host}/api/notes/addNotes`, {\n      method: \"POST\",\n      // *GET, POST, PUT, DELETE, etc.\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjUwMWM0ZTM1YTU0NTQyNzcyMmQzYWIzIn0sImlhdCI6MTY5NTA0NDk4NH0.wTMS84uz0KDOtDcGbf3R4HB3wlIEQPIBP3BeC-s0CH8\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tags\n      })\n    });\n    const note = {\n      _id: \"65094c494a47126b4828747d50\",\n      user: \"6501c4e35a545427722d3aeb3\",\n      title: title,\n      tags: tags,\n      description: description,\n      date: \"2023-09-19T07:22:49.177Z\",\n      __v: 0\n    };\n    setNotes(notes.concat(note));\n  };\n\n  // edit  notes\n\n  //API calls\n\n  // logic for editing notes on the client side.\n  const editNote = async (id, title, description, tags) => {\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: \"POST\",\n      // *GET, POST, PUT, DELETE, etc.\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjUwMWM0ZTM1YTU0NTQyNzcyMmQzYWIzIn0sImlhdCI6MTY5NTA0NDk4NH0.wTMS84uz0KDOtDcGbf3R4HB3wlIEQPIBP3BeC-s0CH8\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tags\n      })\n    });\n    return response.json();\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n      if (element._id === id) {\n        element.title = title;\n        element.description = description;\n        element.tags = tags;\n      }\n    }\n  };\n\n  // delete old notes\n  // Define a function called \"deleteNote\" that takes an \"id\" parameter.\n  const deleteNote = id => {\n    // Log a message to the console indicating the deletion of a note with the provided \"id.\"\n    console.log(\"deleting the note with id \" + id);\n\n    // Create a new array called \"newNote\" by filtering the \"notes\" array to remove items with a matching \"_id.\"\n    const newNote = notes.filter(note => {\n      return note._id !== id;\n    });\n\n    // Update the \"notes\" array with the newly filtered \"newNote\" array.\n    setNotes(newNote);\n  };\n  return (\n    /*#__PURE__*/\n    // Returning the NoteContext.Provider with a value containing the 'state' and 'update' function\n    _jsxDEV(NoteContext.Provider, {\n      value: {\n        notes,\n        editNote,\n        addNotes,\n        deleteNote,\n        fetchNotes\n      },\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n_c = NoteState;\nexport default NoteState; // Exporting the NoteState component as the default export\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["NoteContext","useState","jsxDEV","_jsxDEV","NoteState","props","_s","host","notesInitial","notes","setNotes","fetchNotes","response","fetch","method","headers","json","console","log","addNotes","title","description","tags","body","JSON","stringify","note","_id","user","date","__v","concat","editNote","id","index","length","element","deleteNote","newNote","filter","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/cx417/Desktop/Authentication/inotebook/src/context/notes/noteState.js"],"sourcesContent":["import NoteContext from \"./noteContext\"; // Importing the NoteContext from \"./noteContext\"\r\nimport { useState } from \"react\";\r\n\r\nconst NoteState = (props) => {\r\n  // Defining a functional component called NoteState which takes props\r\n  const host = \"http://localhost:5000\";\r\n  const notesInitial = [];\r\n  const [notes, setNotes] = useState(notesInitial); //\r\n\r\n    // addAll notes\r\n\r\n    const fetchNotes = async () => {\r\n\r\n      const response = await fetch(`${host}/api/notes/notesFetched`, {\r\n        method: \"GET\", // *GET, POST, PUT, DELETE, etc.\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjUwMWM0ZTM1YTU0NTQyNzcyMmQzYWIzIn0sImlhdCI6MTY5NTA0NDk4NH0.wTMS84uz0KDOtDcGbf3R4HB3wlIEQPIBP3BeC-s0CH8\"\r\n        },\r\n      });\r\n\r\n      const json = await response.json();\r\n      console.log(json);\r\n  \r\n    };\r\n\r\n  // add notes\r\n\r\n  const addNotes = async (title, description, tags) => {\r\n\r\n    const response = await fetch(`${host}/api/notes/addNotes`, {\r\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjUwMWM0ZTM1YTU0NTQyNzcyMmQzYWIzIn0sImlhdCI6MTY5NTA0NDk4NH0.wTMS84uz0KDOtDcGbf3R4HB3wlIEQPIBP3BeC-s0CH8\"\r\n      },\r\n      body: JSON.stringify({title, description, tags}),\r\n    });\r\n\r\n    const note = {\r\n      _id: \"65094c494a47126b4828747d50\",\r\n      user: \"6501c4e35a545427722d3aeb3\",\r\n      title: title,\r\n      tags: tags,\r\n      description:\r\n        description,\r\n      date: \"2023-09-19T07:22:49.177Z\",\r\n      __v: 0,\r\n    }\r\n    setNotes(notes.concat(note))\r\n  };\r\n\r\n  // edit  notes\r\n\r\n  //API calls\r\n\r\n\r\n  // logic for editing notes on the client side.\r\n  const editNote = async (id, title, description, tags) => {\r\n   \r\n  const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n    method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjUwMWM0ZTM1YTU0NTQyNzcyMmQzYWIzIn0sImlhdCI6MTY5NTA0NDk4NH0.wTMS84uz0KDOtDcGbf3R4HB3wlIEQPIBP3BeC-s0CH8\"\r\n    },\r\n    body: JSON.stringify({title, description, tags}),\r\n  });\r\n  return response.json(); \r\n    for (let index = 0; index < notes.length; index++) {\r\n      const element = notes[index];\r\n      if(element._id === id) {\r\n        element.title = title;\r\n        element.description = description;\r\n        element.tags = tags;\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\n  // delete old notes\r\n  // Define a function called \"deleteNote\" that takes an \"id\" parameter.\r\nconst deleteNote = (id) => {\r\n  // Log a message to the console indicating the deletion of a note with the provided \"id.\"\r\n  console.log(\"deleting the note with id \" + id)\r\n\r\n  // Create a new array called \"newNote\" by filtering the \"notes\" array to remove items with a matching \"_id.\"\r\n  const newNote = notes.filter((note) => {\r\n      return note._id !== id;\r\n  })\r\n\r\n  // Update the \"notes\" array with the newly filtered \"newNote\" array.\r\n  setNotes(newNote);\r\n}\r\n\r\n\r\n  return (\r\n    // Returning the NoteContext.Provider with a value containing the 'state' and 'update' function\r\n    <NoteContext.Provider value={{ notes, editNote, addNotes, deleteNote, fetchNotes }}>\r\n      {props.children}\r\n    </NoteContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NoteState; // Exporting the NoteState component as the default export"],"mappings":";;AAAA,OAAOA,WAAW,MAAM,eAAe,CAAC,CAAC;AACzC,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,SAAS,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC3B;EACA,MAAMC,IAAI,GAAG,uBAAuB;EACpC,MAAMC,YAAY,GAAG,EAAE;EACvB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAACO,YAAY,CAAC,CAAC,CAAC;;EAEhD;;EAEA,MAAMG,UAAU,GAAG,MAAAA,CAAA,KAAY;IAE7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,yBAAwB,EAAE;MAC7DO,MAAM,EAAE,KAAK;MAAE;MACfC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,YAAY,EAAE;MAChB;IACF,CAAC,CAAC;IAEF,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAI,CAAC,CAAC;IAClCC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EAEnB,CAAC;;EAEH;;EAEA,MAAMG,QAAQ,GAAG,MAAAA,CAAOC,KAAK,EAAEC,WAAW,EAAEC,IAAI,KAAK;IAEnD,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,qBAAoB,EAAE;MACzDO,MAAM,EAAE,MAAM;MAAE;MAChBC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,YAAY,EAAE;MAChB,CAAC;MACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACL,KAAK;QAAEC,WAAW;QAAEC;MAAI,CAAC;IACjD,CAAC,CAAC;IAEF,MAAMI,IAAI,GAAG;MACXC,GAAG,EAAE,4BAA4B;MACjCC,IAAI,EAAE,2BAA2B;MACjCR,KAAK,EAAEA,KAAK;MACZE,IAAI,EAAEA,IAAI;MACVD,WAAW,EACTA,WAAW;MACbQ,IAAI,EAAE,0BAA0B;MAChCC,GAAG,EAAE;IACP,CAAC;IACDpB,QAAQ,CAACD,KAAK,CAACsB,MAAM,CAACL,IAAI,CAAC,CAAC;EAC9B,CAAC;;EAED;;EAEA;;EAGA;EACA,MAAMM,QAAQ,GAAG,MAAAA,CAAOC,EAAE,EAAEb,KAAK,EAAEC,WAAW,EAAEC,IAAI,KAAK;IAEzD,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,yBAAwB0B,EAAG,EAAC,EAAE;MACjEnB,MAAM,EAAE,MAAM;MAAE;MAChBC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,YAAY,EAAE;MAChB,CAAC;MACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACL,KAAK;QAAEC,WAAW;QAAEC;MAAI,CAAC;IACjD,CAAC,CAAC;IACF,OAAOV,QAAQ,CAACI,IAAI,CAAC,CAAC;IACpB,KAAK,IAAIkB,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGzB,KAAK,CAAC0B,MAAM,EAAED,KAAK,EAAE,EAAE;MACjD,MAAME,OAAO,GAAG3B,KAAK,CAACyB,KAAK,CAAC;MAC5B,IAAGE,OAAO,CAACT,GAAG,KAAKM,EAAE,EAAE;QACrBG,OAAO,CAAChB,KAAK,GAAGA,KAAK;QACrBgB,OAAO,CAACf,WAAW,GAAGA,WAAW;QACjCe,OAAO,CAACd,IAAI,GAAGA,IAAI;MACvB;IAEF;EAEF,CAAC;;EAEC;EACA;EACF,MAAMe,UAAU,GAAIJ,EAAE,IAAK;IACzB;IACAhB,OAAO,CAACC,GAAG,CAAC,4BAA4B,GAAGe,EAAE,CAAC;;IAE9C;IACA,MAAMK,OAAO,GAAG7B,KAAK,CAAC8B,MAAM,CAAEb,IAAI,IAAK;MACnC,OAAOA,IAAI,CAACC,GAAG,KAAKM,EAAE;IAC1B,CAAC,CAAC;;IAEF;IACAvB,QAAQ,CAAC4B,OAAO,CAAC;EACnB,CAAC;EAGC;IAAA;IACE;IACAnC,OAAA,CAACH,WAAW,CAACwC,QAAQ;MAACC,KAAK,EAAE;QAAEhC,KAAK;QAAEuB,QAAQ;QAAEb,QAAQ;QAAEkB,UAAU;QAAE1B;MAAW,CAAE;MAAA+B,QAAA,EAChFrC,KAAK,CAACqC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK;EAAC;AAE3B,CAAC;AAACxC,EAAA,CApGIF,SAAS;AAAA2C,EAAA,GAAT3C,SAAS;AAsGf,eAAeA,SAAS,CAAC,CAAC;AAAA,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}